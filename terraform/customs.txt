# Crear máquinas virtuales para workers
resource "azurerm_linux_virtual_machine" "worker" {
  count               = var.worker_count
  name                = "${var.prefix}-worker-${count.index + 1}"
  resource_group_name = azurerm_resource_group.rg.name
  location            = azurerm_resource_group.rg.location
  size                = "Standard_B1s"
  admin_username      = "worker_user"

  network_interface_ids = [
    azurerm_network_interface.worker_nic[count.index].id,
  ]

  admin_ssh_key {
    username   = "worker_user"
    public_key = file(var.ssh_public_key_path)
  }

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Debian"
    offer     = "debian-11"
    sku       = "11"
    version   = "latest"
  }

  custom_data = base64encode(<<-EOF
  #!/bin/bash
  sudo apt-get update
  sudo apt-get install -y nginx
  sudo tee /var/www/html/index.html > /dev/null <<EOT
  ${file("${path.module}/../templates/worker_template.html")}
  EOT
  sudo systemctl enable nginx
  sudo systemctl start nginx
  EOF
  )
}
# Crear máquina virtual para el balanceador
resource "azurerm_linux_virtual_machine" "lb" {
  name                = "${var.prefix}-lb"
  resource_group_name = azurerm_resource_group.rg.name
  location            = azurerm_resource_group.rg.location
  size                = "Standard_B1s"
  admin_username      = "lb_user"

  network_interface_ids = [
    azurerm_network_interface.lb_nic.id,
  ]

  admin_ssh_key {
    username   = "lb_user"
    public_key = file(var.ssh_public_key_path)
  }

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Debian"
    offer     = "debian-11"
    sku       = "11"
    version   = "latest"
  }
  custom_data = base64encode(<<-EOF
  #!/bin/bash
  sudo apt-get update
  sudo apt-get install -y nginx
  sudo tee /etc/nginx/nginx.conf > /dev/null <<EOT
  ${templatefile("${path.module}/../templates/lb_nginx.conf", {
    worker_ips = azurerm_network_interface.worker_nic[*].private_ip_address
})}
    EOT
    sudo systemctl enable nginx
    sudo systemctl restart nginx
    EOF
)
}

  custom_data = base64encode(<<-EOT
    #cloud-config
    package_update: true
    packages:
      - nginx
    write_files:
      - path: /worker_user/scripts/configure_worker.sh
        content: |
            ${file("${path.module}/../scripts/configure_worker.sh")}
          permissions: '0755'
        - path: /worker_user/scripts/worker_template.html
          content: |
            ${file("${path.module}/../templates/worker_template.html")}
    runcmd:
      - chmod +x /worker_user/scripts/configure_worker.sh
      - systemctl start nginx
      - systemctl enable nginx
  EOT
  )
# Regla de seguridad de red para permitir SSH al balanceador
resource "azurerm_network_security_group" "lb_nsg" {
  name                = "${var.prefix}-lb-nsg"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name

  security_rule {
    name                       = "SSH"
    priority                   = 1001
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = "*"
    destination_address_prefix = "10.0.2.0/24"
  }

  security_rule {
    name                       = "HTTP"
    priority                   = 1002
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "80"
    source_address_prefix      = "*"
    destination_address_prefix = "10.0.2.0/24"
  }
}